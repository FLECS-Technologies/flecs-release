name: Create new release
on:
  workflow_call:
    inputs:
      name:
        required: true
        description: name of the repository
        type: string
      env_webapp_version:
        required: true
        description: new webapp version
        type: string
      env_webapp_branch:
        required: false
        description: target release branch
        default: main
        type: string
      should_fail:
        description: simulate failure of workflow
        required: false
        type: boolean
      should_timeout:
        description: simulation timeout of workflow
        required: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub App installation access token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.app_id }}
          private-key: ${{ secrets.private_key }}
          owner: FLECS-Technologies
          repositories: flecs-${{ inputs.name }}

      - name: Create webapp release
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{app}/releases
          owner: FLECS-Technologies
          app: flecs-${{ inputs.name }}
          data: >
            {
              "tag_name": "${{ inputs.env_webapp_version }}",
              "target_commitish": ${{ inputs.env_webapp_branch }},
              "name":"${{ inputs.env_webapp_version }}",
              "body":"Automated dummy release",
              "draft": false,
              "prerelease": false,
              "message": "automated tag creation",
              "generate_release_notes":true,
              "make_latest": "false"
            }
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Check webapp release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          OWNER: FLECS-Technologies
          REPO: flecs-${{ inputs.name }}
          TAG: ${{ inputs.env_webapp_version }}
        run: |
          for i in {1..10}; do
            echo "Checking if release $TAG exists"
            RELEASE_EXISTS=$(gh api repos/$OWNER/$REPO/releases --jq ".[] | select(.tag_name == \"$TAG\") | .id")
            if [ "$RELEASE_EXISTS" -gt 0 ]; then
              echo "Release $TAG found!"
              exit 0
            fi
            echo "Release not found, retrying in 5s"
            sleep 5
          done
          echo "Timed out waiting for release $TAG."
          exit 1

      - name: Simulate timeout
        if: inputs.should_timeout == 'true'
        run: |
          echo "Simulating timeout..."
          while true; do
            echo "Hanging indefinitely..."
            sleep 60
          done

      - name: Simulate failure
        if: inputs.should_fail == 'true'
        run: |
          echo "Simulating failure..."
          exit 1
