name: Create release for app
on:
  workflow_call:
    inputs:
      name:
        required: true
        description: name of the repository
        type: string
      env_version:
        required: true
        description: new webapp version
        type: string
      env_branch:
        required: false
        description: target release branch
        default: main
        type: string
jobs:
  generate_token:
    runs-on: ubuntu-latest
    outputs:
      app_token: ${{ steps.app-token.outputs.token }}
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.FLECS_WORKFLOW_AUTOMATION_CLIENT_ID }}
          private-key: ${{ secrets.FLECS_WORKFLOW_AUTOMATION_KEY  }}
          owner: FLECS-Technologies
          repositories: |
            flecs-webapp-dummy
            flecs-build-dummy
            flecs-public-dummy
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - run: echo "${{ inputs.name }} Release"

      - name: Create release
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{app}/releases
          owner: FLECS-Technologies
          app: flecs-${{ inputs.name }}
          data: >
            {
              "tag_name": "${{ inputs.env_version }}",
              "target_commitish": ${{ inputs.env_branch }},
              "name":"${{ inputs.env_version }}",
              "body":"Automated dummy release",
              "draft": false,
              "prerelease": false,
              "message": "automated tag creation",
              "generate_release_notes":true,
              "make_latest": "false"
            }
        env:
          GITHUB_TOKEN: ${{ needs.generate_token.outputs.app_token }}

      - name: Check release
        env:
          GITHUB_TOKEN: ${{ needs.generate_token.outputs.app_token }}
          OWNER: FLECS-Technologies
          REPO: flecs-${{ inputs.name }}
          TAG: ${{ inputs.env_version }}
        run: |
          for i in {1..10}; do
            echo "Checking if release $TAG exists"
            RELEASE_EXISTS=$(gh api repos/$OWNER/$REPO/releases --jq ".[] | select(.tag_name == \"$TAG\") | .id")
            if [ "$RELEASE_EXISTS" -gt 0 ]; then
              echo "Release $TAG found!"
              exit 0
            fi
            echo "Release not found, retrying in 5s"
            sleep 5
          done
          echo "Timed out waiting for release $TAG."
          exit 1