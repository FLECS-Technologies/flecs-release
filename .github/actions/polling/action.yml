name: Polling for completed workflow run
description: Polls for a completed and successful workflow run
inputs:
  name:
    description: Name of repository
    required: true
  github_token:
    description: GitHub Token
    required: true
outputs:
  run_id:
    description: The run_id of the successful workflow
    value: ${{ steps.poll.outputs.run_id }}
runs:
  using: composite
  steps:
    - id: poll
      run: |
        MAX_RETRIES=50
        INTERVAL=30
        COUNTER=0
        FOUND=false
        short_name=$(echo "${{ inputs.name }}" | cut -d'-' -f1) #remove later for real repositories

        while [[ $COUNTER -lt $MAX_RETRIES ]]; do
          echo "Attempt $((COUNTER+1)) of $MAX_RETRIES"

          response=$(curl -s -H "Authorization: token ${{ inputs.github_token }}" \
            https://api.github.com/repos/FLECS-Technologies/flecs-release/actions/runs)

          run_id=$(echo "$response" | jq -r '.workflow_runs[0].id')
          echo "Last run_id: $run_id"

          jobs_response=$(curl -s -H "Authorization: token ${{ inputs.github_token }}" \
            https://api.github.com/repos/FLECS-Technologies/flecs-release/actions/runs/${run_id}/jobs)

          echo "Found jobs:"
          echo "$jobs_response" | jq -r '.jobs[].name'

          matching_job_id=$(echo "$jobs_response" | jq -r --arg name "$short_name" '
            .jobs[]
            | select(.name | test("^release_" + $name + " / release$")) #change later for real repositories, only for dummy repos now
            | .id
          ')

          echo "Release workflow id: $matching_job_id"

          job_status=$(echo "$jobs_response" | jq -r --arg name "${{ inputs.name }}" '
            .jobs[]
            | select(.name | test("^release_" + $name + " / release$"))
            | .status
          ')

          echo "Job status of release_${{ inputs.name }} / release: $job_status"

          job_conclusion=$(echo "$jobs_response" | jq -r --arg name "${{ inputs.name }}" '
            .jobs[]
            | select(.name | test("^release_" + $name + " / release$"))
            | .conclusion
          ')

          if [[ "$job_status" == "completed" && "$job_conclusion" == "success" ]]; then
            echo "Target job is successfully completed"
            echo "run_id=$run_id" >> "$GITHUB_OUTPUT"
            FOUND=true
            break
          fi

          COUNTER=$((COUNTER+1))
          echo "No Run completed yet. Wait for $INTERVAL seconds"
          sleep $INTERVAL
        done

        if [[ "$FOUND" == "false" ]]; then
          echo "Timeout: No completed run found."
          exit 1
        fi
      shell: bash