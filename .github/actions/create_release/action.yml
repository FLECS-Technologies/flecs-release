name: Release new webapp version
description: yeah
inputs:
  name:
    required: true
    description: name of the repository
  env_webapp_version:
    required: true
    description: new webapp version
  env_webapp_branch:
    required: false
    description: target release branch
    default: main
  should_fail:
    description: simulate failure of workflow
    required: false
  should_timeout:
    description: simulation timeout of workflow
    required: false
  app_id:
    description: app id
    required: true
  private_key:
    description: private key
    required: true
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create GitHub App installation access token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ inputs.app_id }}
        private-key: ${{ inputs.private_key }}
        owner: FLECS-Technologies
        repositories: flecs-${{ inputs.name }}

    - name: Create webapp release
      uses: octokit/request-action@v2.x
      with:
        route: POST /repos/{owner}/{app}/releases
        owner: FLECS-Technologies
        app: flecs-${{ inputs.name }}
        data: >
          {
            "tag_name": "${{ inputs.env_webapp_version }}",
            "target_commitish": ${{ inputs.env_webapp_branch }},
            "name":"${{ inputs.env_webapp_version }}",
            "body":"Automated dummy release",
            "draft": false,
            "prerelease": false,
            "message": "automated tag creation",
            "generate_release_notes":true,
            "make_latest": "false"
          }
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Check webapp release
      env:
        GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        OWNER: FLECS-Technologies
        REPO: flecs-${{ inputs.name }}
        TAG: ${{ inputs.env_webapp_version }}
      run: |
        for i in {1..10}; do
          echo "Checking if release $TAG exists"
          RELEASE_EXISTS=$(gh api repos/$OWNER/$REPO/releases --jq ".[] | select(.tag_name == \"$TAG\") | .id")
          if [ "$RELEASE_EXISTS" -gt 0 ]; then
            echo "Release $TAG found!"
            exit 0
          fi
          echo "Release not found, retrying in 5s"
          sleep 5
        done
        echo "Timed out waiting for release $TAG."
        exit 1
      shell: bash

    - name: Simulate timeout
      if: inputs.should_timeout == 'true'
      run: |
        echo "Simulating timeout..."
        while true; do
          echo "Hanging indefinitely..."
          sleep 60
        done
      shell: bash

    - name: Simulate failure
      if: inputs.should_fail == 'true'
      run: |
        echo "Simulating failure..."
        exit 1
      shell: bash
